{"ast":null,"code":"import { crypto as cr } from \"@noble/hashes/crypto\";\nimport { concatBytes, equalsBytes } from \"./utils.js\";\nconst crypto = {\n  web: cr\n};\nfunction validateOpt(key, iv, mode) {\n  if (!mode.startsWith(\"aes-\")) {\n    throw new Error(`AES submodule doesn't support mode ${mode}`);\n  }\n  if (iv.length !== 16) {\n    throw new Error(\"AES: wrong IV length\");\n  }\n  if (mode.startsWith(\"aes-128\") && key.length !== 16 || mode.startsWith(\"aes-256\") && key.length !== 32) {\n    throw new Error(\"AES: wrong key length\");\n  }\n}\nasync function getBrowserKey(mode, key, iv) {\n  if (!crypto.web) {\n    throw new Error(\"Browser crypto not available.\");\n  }\n  let keyMode;\n  if ([\"aes-128-cbc\", \"aes-256-cbc\"].includes(mode)) {\n    keyMode = \"cbc\";\n  }\n  if ([\"aes-128-ctr\", \"aes-256-ctr\"].includes(mode)) {\n    keyMode = \"ctr\";\n  }\n  if (!keyMode) {\n    throw new Error(\"AES: unsupported mode\");\n  }\n  const wKey = await crypto.web.subtle.importKey(\"raw\", key, {\n    name: `AES-${keyMode.toUpperCase()}`,\n    length: key.length * 8\n  }, true, [\"encrypt\", \"decrypt\"]);\n  // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit\n  // recommended by NIST SP800-38A\n  return [wKey, {\n    name: `aes-${keyMode}`,\n    iv,\n    counter: iv,\n    length: 128\n  }];\n}\nexport async function encrypt(msg, key, iv) {\n  let mode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"aes-128-ctr\";\n  let pkcs7PaddingEnabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  validateOpt(key, iv, mode);\n  if (crypto.web) {\n    const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n    const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);\n    // Remove PKCS7 padding on cbc mode by stripping end of message\n    let res = new Uint8Array(cipher);\n    if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\" && !(msg.length % 16)) {\n      res = res.slice(0, -16);\n    }\n    return res;\n  } else if (crypto.node) {\n    const cipher = crypto.node.createCipheriv(mode, key, iv);\n    cipher.setAutoPadding(pkcs7PaddingEnabled);\n    return concatBytes(cipher.update(msg), cipher.final());\n  } else {\n    throw new Error(\"The environment doesn't have AES module\");\n  }\n}\nasync function getPadding(cypherText, key, iv, mode) {\n  const lastBlock = cypherText.slice(-16);\n  for (let i = 0; i < 16; i++) {\n    // Undo xor of iv and fill with lastBlock ^ padding (16)\n    lastBlock[i] ^= iv[i] ^ 16;\n  }\n  const res = await encrypt(lastBlock, key, iv, mode);\n  return res.slice(0, 16);\n}\nexport async function decrypt(cypherText, key, iv) {\n  let mode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"aes-128-ctr\";\n  let pkcs7PaddingEnabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n  validateOpt(key, iv, mode);\n  if (crypto.web) {\n    const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n    // Add empty padding so Chrome will correctly decrypt message\n    if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\") {\n      const padding = await getPadding(cypherText, key, iv, mode);\n      cypherText = concatBytes(cypherText, padding);\n    }\n    const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);\n    const msgBytes = new Uint8Array(msg);\n    // Safari always ignores padding (if no padding -> broken message)\n    if (wOpt.name === \"aes-cbc\") {\n      const encrypted = await encrypt(msgBytes, key, iv, mode);\n      if (!equalsBytes(encrypted, cypherText)) {\n        throw new Error(\"AES: wrong padding\");\n      }\n    }\n    return msgBytes;\n  } else if (crypto.node) {\n    const decipher = crypto.node.createDecipheriv(mode, key, iv);\n    decipher.setAutoPadding(pkcs7PaddingEnabled);\n    return concatBytes(decipher.update(cypherText), decipher.final());\n  } else {\n    throw new Error(\"The environment doesn't have AES module\");\n  }\n}","map":{"version":3,"names":["crypto","cr","concatBytes","equalsBytes","web","validateOpt","key","iv","mode","startsWith","Error","length","getBrowserKey","keyMode","includes","wKey","subtle","importKey","name","toUpperCase","counter","encrypt","msg","arguments","undefined","pkcs7PaddingEnabled","wOpt","cipher","res","Uint8Array","slice","node","createCipheriv","setAutoPadding","update","final","getPadding","cypherText","lastBlock","i","decrypt","padding","msgBytes","encrypted","decipher","createDecipheriv"],"sources":["C:/Users/deanw/OneDrive/Desktop/GitHub/tribepacks/node_modules/ethereum-cryptography/esm/aes.js"],"sourcesContent":["import { crypto as cr } from \"@noble/hashes/crypto\";\nimport { concatBytes, equalsBytes } from \"./utils.js\";\nconst crypto = { web: cr };\nfunction validateOpt(key, iv, mode) {\n    if (!mode.startsWith(\"aes-\")) {\n        throw new Error(`AES submodule doesn't support mode ${mode}`);\n    }\n    if (iv.length !== 16) {\n        throw new Error(\"AES: wrong IV length\");\n    }\n    if ((mode.startsWith(\"aes-128\") && key.length !== 16) ||\n        (mode.startsWith(\"aes-256\") && key.length !== 32)) {\n        throw new Error(\"AES: wrong key length\");\n    }\n}\nasync function getBrowserKey(mode, key, iv) {\n    if (!crypto.web) {\n        throw new Error(\"Browser crypto not available.\");\n    }\n    let keyMode;\n    if ([\"aes-128-cbc\", \"aes-256-cbc\"].includes(mode)) {\n        keyMode = \"cbc\";\n    }\n    if ([\"aes-128-ctr\", \"aes-256-ctr\"].includes(mode)) {\n        keyMode = \"ctr\";\n    }\n    if (!keyMode) {\n        throw new Error(\"AES: unsupported mode\");\n    }\n    const wKey = await crypto.web.subtle.importKey(\"raw\", key, { name: `AES-${keyMode.toUpperCase()}`, length: key.length * 8 }, true, [\"encrypt\", \"decrypt\"]);\n    // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit\n    // recommended by NIST SP800-38A\n    return [wKey, { name: `aes-${keyMode}`, iv, counter: iv, length: 128 }];\n}\nexport async function encrypt(msg, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);\n        // Remove PKCS7 padding on cbc mode by stripping end of message\n        let res = new Uint8Array(cipher);\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\" && !(msg.length % 16)) {\n            res = res.slice(0, -16);\n        }\n        return res;\n    }\n    else if (crypto.node) {\n        const cipher = crypto.node.createCipheriv(mode, key, iv);\n        cipher.setAutoPadding(pkcs7PaddingEnabled);\n        return concatBytes(cipher.update(msg), cipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\nasync function getPadding(cypherText, key, iv, mode) {\n    const lastBlock = cypherText.slice(-16);\n    for (let i = 0; i < 16; i++) {\n        // Undo xor of iv and fill with lastBlock ^ padding (16)\n        lastBlock[i] ^= iv[i] ^ 16;\n    }\n    const res = await encrypt(lastBlock, key, iv, mode);\n    return res.slice(0, 16);\n}\nexport async function decrypt(cypherText, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        // Add empty padding so Chrome will correctly decrypt message\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\") {\n            const padding = await getPadding(cypherText, key, iv, mode);\n            cypherText = concatBytes(cypherText, padding);\n        }\n        const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);\n        const msgBytes = new Uint8Array(msg);\n        // Safari always ignores padding (if no padding -> broken message)\n        if (wOpt.name === \"aes-cbc\") {\n            const encrypted = await encrypt(msgBytes, key, iv, mode);\n            if (!equalsBytes(encrypted, cypherText)) {\n                throw new Error(\"AES: wrong padding\");\n            }\n        }\n        return msgBytes;\n    }\n    else if (crypto.node) {\n        const decipher = crypto.node.createDecipheriv(mode, key, iv);\n        decipher.setAutoPadding(pkcs7PaddingEnabled);\n        return concatBytes(decipher.update(cypherText), decipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}