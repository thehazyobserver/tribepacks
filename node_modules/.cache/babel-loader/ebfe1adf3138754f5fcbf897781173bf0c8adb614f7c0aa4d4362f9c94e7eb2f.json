{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { InvalidAddressError, InvalidMethodParamsError, InvalidNumberError, Web3ContractError } from 'web3-errors';\nimport { isNullish, mergeDeep, isContractInitOptions, keccak256, toChecksumAddress, hexToNumber } from 'web3-utils';\nimport { isAddress, isHexString } from 'web3-validator';\nimport { encodeMethodABI } from './encoding.js';\nconst dataInputEncodeMethodHelper = (txParams, abi, params, dataInputFill) => {\n  var _a, _b;\n  const tx = {};\n  if (!isNullish(txParams.data) || dataInputFill === 'both') {\n    tx.data = encodeMethodABI(abi, params, (_a = txParams.data) !== null && _a !== void 0 ? _a : txParams.input);\n  }\n  if (!isNullish(txParams.input) || dataInputFill === 'both') {\n    tx.input = encodeMethodABI(abi, params, (_b = txParams.input) !== null && _b !== void 0 ? _b : txParams.data);\n  }\n  // if input and data is empty, use web3config default\n  if (isNullish(tx.input) && isNullish(tx.data)) {\n    tx[dataInputFill] = encodeMethodABI(abi, params);\n  }\n  return {\n    data: tx.data,\n    input: tx.input\n  };\n};\nexport const getSendTxParams = _ref => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref;\n  var _a, _b, _c;\n  const deploymentCall = (_c = (_b = (_a = options === null || options === void 0 ? void 0 : options.input) !== null && _a !== void 0 ? _a : options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : contractOptions.input) !== null && _c !== void 0 ? _c : contractOptions.data;\n  if (!deploymentCall && !(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexport const getEthTxCallParams = _ref2 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref2;\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexport const getEstimateGasParams = _ref3 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref3;\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexport const isWeb3ContractContext = options => typeof options === 'object' && !isNullish(options) && Object.keys(options).length !== 0 && !isContractInitOptions(options);\nexport const getCreateAccessListParams = _ref4 => {\n  let {\n    abi,\n    params,\n    options,\n    contractOptions\n  } = _ref4;\n  if (!(options === null || options === void 0 ? void 0 : options.to) && !contractOptions.address) {\n    throw new Web3ContractError('Contract address not specified');\n  }\n  if (!(options === null || options === void 0 ? void 0 : options.from) && !contractOptions.from) {\n    throw new Web3ContractError('Contract \"from\" address not specified');\n  }\n  let txParams = mergeDeep({\n    to: contractOptions.address,\n    gas: contractOptions.gas,\n    gasPrice: contractOptions.gasPrice,\n    from: contractOptions.from,\n    input: contractOptions.input,\n    maxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n    maxFeePerGas: contractOptions.maxFeePerGas,\n    data: contractOptions.data\n  }, options);\n  const dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options === null || options === void 0 ? void 0 : options.dataInputFill);\n  txParams = Object.assign(Object.assign({}, txParams), {\n    data: dataInput.data,\n    input: dataInput.input\n  });\n  return txParams;\n};\nexport const createContractAddress = (from, nonce) => {\n  if (!isAddress(from)) throw new InvalidAddressError(`Invalid address given ${from}`);\n  let nonceValue = nonce;\n  if (typeof nonce === 'string' && isHexString(nonce)) nonceValue = hexToNumber(nonce);else if (typeof nonce === 'string' && !isHexString(nonce)) throw new InvalidNumberError('Invalid nonce value format');\n  const rlpEncoded = RLP.encode([from, nonceValue]);\n  const result = keccak256(rlpEncoded);\n  const contractAddress = '0x'.concat(result.substring(26));\n  return toChecksumAddress(contractAddress);\n};\nexport const create2ContractAddress = (from, salt, initCode) => {\n  if (!isAddress(from)) throw new InvalidAddressError(`Invalid address given ${from}`);\n  if (!isHexString(salt)) throw new InvalidMethodParamsError(`Invalid salt value ${salt}`);\n  if (!isHexString(initCode)) throw new InvalidMethodParamsError(`Invalid initCode value ${initCode}`);\n  const initCodeHash = keccak256(initCode);\n  const initCodeHashPadded = initCodeHash.padStart(64, '0'); // Pad to 32 bytes (64 hex characters)\n  const create2Params = ['0xff', from, salt, initCodeHashPadded].map(x => x.replace(/0x/, ''));\n  const create2Address = `0x${create2Params.join('')}`;\n  return toChecksumAddress(`0x${keccak256(create2Address).slice(26)}`); // Slice to get the last 20 bytes (40 hex characters) & checksum\n};","map":{"version":3,"names":["RLP","InvalidAddressError","InvalidMethodParamsError","InvalidNumberError","Web3ContractError","isNullish","mergeDeep","isContractInitOptions","keccak256","toChecksumAddress","hexToNumber","isAddress","isHexString","encodeMethodABI","dataInputEncodeMethodHelper","txParams","abi","params","dataInputFill","tx","data","_a","input","_b","getSendTxParams","_ref","options","contractOptions","deploymentCall","_c","to","address","from","gas","gasPrice","maxPriorityFeePerGas","maxFeePerGas","dataInput","Object","assign","getEthTxCallParams","_ref2","getEstimateGasParams","_ref3","isWeb3ContractContext","keys","length","getCreateAccessListParams","_ref4","createContractAddress","nonce","nonceValue","rlpEncoded","encode","result","contractAddress","concat","substring","create2ContractAddress","salt","initCode","initCodeHash","initCodeHashPadded","padStart","create2Params","map","x","replace","create2Address","join","slice"],"sources":["C:\\Users\\deanw\\OneDrive\\Desktop\\GitHub\\tribepacks\\node_modules\\web3-eth-contract\\src\\utils.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { RLP } from '@ethereumjs/rlp';\nimport {\n\tInvalidAddressError,\n\tInvalidMethodParamsError,\n\tInvalidNumberError,\n\tWeb3ContractError,\n} from 'web3-errors';\nimport {\n\tTransactionForAccessList,\n\tAbiFunctionFragment,\n\tTransactionWithSenderAPI,\n\tTransactionCall,\n\tHexString,\n\tAddress,\n\tNonPayableCallOptions,\n\tPayableCallOptions,\n\tContractOptions,\n\tNumbers,\n\tAbiConstructorFragment,\n} from 'web3-types';\nimport {\n\tisNullish,\n\tmergeDeep,\n\tisContractInitOptions,\n\tkeccak256,\n\ttoChecksumAddress,\n\thexToNumber,\n} from 'web3-utils';\nimport { isAddress, isHexString } from 'web3-validator';\nimport { encodeMethodABI } from './encoding.js';\nimport { Web3ContractContext } from './types.js';\n\nconst dataInputEncodeMethodHelper = (\n\ttxParams: TransactionCall | TransactionForAccessList,\n\tabi: AbiFunctionFragment | AbiConstructorFragment,\n\tparams: unknown[],\n\tdataInputFill?: 'data' | 'input' | 'both',\n): { data?: HexString; input?: HexString } => {\n\tconst tx: { data?: HexString; input?: HexString } = {};\n\tif (!isNullish(txParams.data) || dataInputFill === 'both') {\n\t\ttx.data = encodeMethodABI(abi, params, (txParams.data ?? txParams.input) as HexString);\n\t}\n\tif (!isNullish(txParams.input) || dataInputFill === 'both') {\n\t\ttx.input = encodeMethodABI(abi, params, (txParams.input ?? txParams.data) as HexString);\n\t}\n\t// if input and data is empty, use web3config default\n\tif (isNullish(tx.input) && isNullish(tx.data)) {\n\t\ttx[dataInputFill as 'data' | 'input'] = encodeMethodABI(abi, params);\n\t}\n\treturn { data: tx.data as HexString, input: tx.input as HexString };\n};\n\nexport const getSendTxParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment | AbiConstructorFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tinput?: HexString;\n\t\tdata?: HexString;\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tconst deploymentCall =\n\t\toptions?.input ?? options?.data ?? contractOptions.input ?? contractOptions.data;\n\tif (!deploymentCall && !options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n\nexport const getEthTxCallParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionCall => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n\nexport const getEstimateGasParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): Partial<TransactionWithSenderAPI> => {\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionCall;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams as TransactionWithSenderAPI;\n};\n\nexport const isWeb3ContractContext = (options: unknown): options is Web3ContractContext =>\n\ttypeof options === 'object' &&\n\t!isNullish(options) &&\n\tObject.keys(options).length !== 0 &&\n\t!isContractInitOptions(options);\n\nexport const getCreateAccessListParams = ({\n\tabi,\n\tparams,\n\toptions,\n\tcontractOptions,\n}: {\n\tabi: AbiFunctionFragment;\n\tparams: unknown[];\n\toptions?: (PayableCallOptions | NonPayableCallOptions) & {\n\t\tto?: Address;\n\t\tdataInputFill?: 'input' | 'data' | 'both';\n\t};\n\tcontractOptions: ContractOptions;\n}): TransactionForAccessList => {\n\tif (!options?.to && !contractOptions.address) {\n\t\tthrow new Web3ContractError('Contract address not specified');\n\t}\n\n\tif (!options?.from && !contractOptions.from) {\n\t\tthrow new Web3ContractError('Contract \"from\" address not specified');\n\t}\n\n\tlet txParams = mergeDeep(\n\t\t{\n\t\t\tto: contractOptions.address,\n\t\t\tgas: contractOptions.gas,\n\t\t\tgasPrice: contractOptions.gasPrice,\n\t\t\tfrom: contractOptions.from,\n\t\t\tinput: contractOptions.input,\n\t\t\tmaxPriorityFeePerGas: contractOptions.maxPriorityFeePerGas,\n\t\t\tmaxFeePerGas: contractOptions.maxFeePerGas,\n\t\t\tdata: contractOptions.data,\n\t\t},\n\t\toptions as unknown as Record<string, unknown>,\n\t) as unknown as TransactionForAccessList;\n\n\tconst dataInput = dataInputEncodeMethodHelper(txParams, abi, params, options?.dataInputFill);\n\ttxParams = { ...txParams, data: dataInput.data, input: dataInput.input };\n\n\treturn txParams;\n};\n\nexport const createContractAddress = (from: Address, nonce: Numbers): Address => {\n\tif (!isAddress(from)) throw new InvalidAddressError(`Invalid address given ${from}`);\n\n\tlet nonceValue = nonce;\n\tif (typeof nonce === 'string' && isHexString(nonce)) nonceValue = hexToNumber(nonce);\n\telse if (typeof nonce === 'string' && !isHexString(nonce))\n\t\tthrow new InvalidNumberError('Invalid nonce value format');\n\n\tconst rlpEncoded = RLP.encode([from, nonceValue]);\n\tconst result = keccak256(rlpEncoded);\n\n\tconst contractAddress = '0x'.concat(result.substring(26));\n\n\treturn toChecksumAddress(contractAddress);\n};\n\nexport const create2ContractAddress = (\n\tfrom: Address,\n\tsalt: HexString,\n\tinitCode: HexString,\n): Address => {\n\tif (!isAddress(from)) throw new InvalidAddressError(`Invalid address given ${from}`);\n\n\tif (!isHexString(salt)) throw new InvalidMethodParamsError(`Invalid salt value ${salt}`);\n\n\tif (!isHexString(initCode))\n\t\tthrow new InvalidMethodParamsError(`Invalid initCode value ${initCode}`);\n\n\tconst initCodeHash = keccak256(initCode);\n\tconst initCodeHashPadded = initCodeHash.padStart(64, '0'); // Pad to 32 bytes (64 hex characters)\n\tconst create2Params = ['0xff', from, salt, initCodeHashPadded].map(x => x.replace(/0x/, ''));\n\tconst create2Address = `0x${create2Params.join('')}`;\n\n\treturn toChecksumAddress(`0x${keccak256(create2Address).slice(26)}`); // Slice to get the last 20 bytes (40 hex characters) & checksum\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}