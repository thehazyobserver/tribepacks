{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport { FMT_BYTES, FMT_NUMBER, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { isNullish, isObject, utils } from 'web3-validator';\nimport { bytesToUint8Array, bytesToHex, numberToHex, toBigInt } from './converters.js';\nimport { mergeDeep } from './objects.js';\nimport { padLeft } from './string_manipulation.js';\nimport { isUint8Array, uint8ArrayConcat } from './uint8array.js';\nconst {\n  parseBaseType\n} = utils;\nexport const isDataFormat = dataFormat => typeof dataFormat === 'object' && !isNullish(dataFormat) && 'number' in dataFormat && 'bytes' in dataFormat;\n/**\n * Finds the schema that corresponds to a specific data path within a larger JSON schema.\n * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.\n *\n * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data\n * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema\n * @param oneOfPath - represents an optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns the JSON schema that matches the data path\n *\n */\nconst findSchemaByDataPath = function (schema, dataPath) {\n  let oneOfPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  let result = Object.assign({}, schema);\n  let previousDataPath;\n  for (const dataPart of dataPath) {\n    if (result.oneOf && previousDataPath) {\n      const currentDataPath = previousDataPath;\n      const path = oneOfPath.find(_ref => {\n        let [key] = _ref;\n        return key === currentDataPath;\n      });\n      if (path && path[0] === previousDataPath) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n        result = result.oneOf[path[1]];\n      }\n    }\n    if (!result.properties && !result.items) {\n      return undefined;\n    }\n    if (result.properties) {\n      result = result.properties[dataPart];\n    } else if (result.items && result.items.properties) {\n      const node = result.items.properties;\n      result = node[dataPart];\n    } else if (result.items && isObject(result.items)) {\n      result = result.items;\n    } else if (result.items && Array.isArray(result.items)) {\n      result = result.items[parseInt(dataPart, 10)];\n    }\n    if (result && dataPart) previousDataPath = dataPart;\n  }\n  return result;\n};\n/**\n * Converts a value depending on the format\n * @param value - value to convert\n * @param ethType - The type of the value to be parsed\n * @param format - The format to be converted to\n * @returns - The value converted to the specified format\n */\nexport const convertScalarValue = (value, ethType, format) => {\n  try {\n    const {\n      baseType,\n      baseTypeSize\n    } = parseBaseType(ethType);\n    if (baseType === 'int' || baseType === 'uint') {\n      switch (format.number) {\n        case FMT_NUMBER.NUMBER:\n          return Number(toBigInt(value));\n        case FMT_NUMBER.HEX:\n          return numberToHex(toBigInt(value));\n        case FMT_NUMBER.STR:\n          return toBigInt(value).toString();\n        case FMT_NUMBER.BIGINT:\n          return toBigInt(value);\n        default:\n          throw new FormatterError(`Invalid format: ${String(format.number)}`);\n      }\n    }\n    if (baseType === 'bytes') {\n      let paddedValue;\n      if (baseTypeSize) {\n        if (typeof value === 'string') paddedValue = padLeft(value, baseTypeSize * 2);else if (isUint8Array(value)) {\n          paddedValue = uint8ArrayConcat(new Uint8Array(baseTypeSize - value.length), value);\n        }\n      } else {\n        paddedValue = value;\n      }\n      switch (format.bytes) {\n        case FMT_BYTES.HEX:\n          return bytesToHex(bytesToUint8Array(paddedValue));\n        case FMT_BYTES.UINT8ARRAY:\n          return bytesToUint8Array(paddedValue);\n        default:\n          throw new FormatterError(`Invalid format: ${String(format.bytes)}`);\n      }\n    }\n    if (baseType === 'string') {\n      return String(value);\n    }\n  } catch (error) {\n    // If someone didn't use `eth` keyword we can return original value\n    // as the scope of this code is formatting not validation\n    return value;\n  }\n  return value;\n};\nconst convertArray = _ref2 => {\n  let {\n    value,\n    schemaProp,\n    schema,\n    object,\n    key,\n    dataPath,\n    format,\n    oneOfPath = []\n  } = _ref2;\n  var _a, _b;\n  // If value is an array\n  if (Array.isArray(value)) {\n    let _schemaProp = schemaProp;\n    // TODO This is a naive approach to solving the issue of\n    // a schema using oneOf. This chunk of code was intended to handle\n    // BlockSchema.transactions\n    // TODO BlockSchema.transactions are not being formatted\n    if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== undefined) {\n      // The following code is basically saying:\n      // if the schema specifies oneOf, then we are to loop\n      // over each possible schema and check if they type of the schema\n      // matches the type of value[0], and if so we use the oneOfSchemaProp\n      // as the schema for formatting\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      schemaProp.oneOf.forEach((oneOfSchemaProp, index) => {\n        var _a, _b;\n        if (!Array.isArray(schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.items) && (typeof value[0] === 'object' && ((_a = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _a === void 0 ? void 0 : _a.type) === 'object' || typeof value[0] === 'string' && ((_b = oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.items) === null || _b === void 0 ? void 0 : _b.type) !== 'object')) {\n          _schemaProp = oneOfSchemaProp;\n          oneOfPath.push([key, index]);\n        }\n      });\n    }\n    if (isNullish(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {\n      // Can not find schema for array item, delete that item\n      // eslint-disable-next-line no-param-reassign\n      delete object[key];\n      dataPath.pop();\n      return true;\n    }\n    // If schema for array items is a single type\n    if (isObject(_schemaProp.items) && !isNullish(_schemaProp.items.format)) {\n      for (let i = 0; i < value.length; i += 1) {\n        // eslint-disable-next-line no-param-reassign\n        object[key][i] = convertScalarValue(value[i],\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        (_a = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _a === void 0 ? void 0 : _a.format, format);\n      }\n      dataPath.pop();\n      return true;\n    }\n    // If schema for array items is an object\n    if (!Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) && ((_b = _schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items) === null || _b === void 0 ? void 0 : _b.type) === 'object') {\n      for (const arrObject of value) {\n        // eslint-disable-next-line no-use-before-define\n        convert(arrObject, schema, dataPath, format, oneOfPath);\n      }\n      dataPath.pop();\n      return true;\n    }\n    // If schema for array is a tuple\n    if (Array.isArray(_schemaProp === null || _schemaProp === void 0 ? void 0 : _schemaProp.items)) {\n      for (let i = 0; i < value.length; i += 1) {\n        // eslint-disable-next-line no-param-reassign\n        object[key][i] = convertScalarValue(value[i], _schemaProp.items[i].format, format);\n      }\n      dataPath.pop();\n      return true;\n    }\n  }\n  return false;\n};\n/**\n * Converts the data to the specified format\n * @param data - data to convert\n * @param schema - The JSON schema that describes the structure of the data\n * @param dataPath - A string array that specifies the path to the data within the JSON schema\n * @param format  - The format to be converted to\n * @param oneOfPath - An optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns - The data converted to the specified format\n */\nexport const convert = function (data, schema, dataPath, format) {\n  let oneOfPath = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n  var _a;\n  // If it's a scalar value\n  if (!isObject(data) && !Array.isArray(data)) {\n    return convertScalarValue(data, schema === null || schema === void 0 ? void 0 : schema.format, format);\n  }\n  const object = data;\n  // case when schema is array and `items` is object\n  if (Array.isArray(object) && (schema === null || schema === void 0 ? void 0 : schema.type) === 'array' && ((_a = schema === null || schema === void 0 ? void 0 : schema.items) === null || _a === void 0 ? void 0 : _a.type) === 'object') {\n    convertArray({\n      value: object,\n      schemaProp: schema,\n      schema,\n      object,\n      key: '',\n      dataPath,\n      format,\n      oneOfPath\n    });\n  } else {\n    for (const [key, value] of Object.entries(object)) {\n      dataPath.push(key);\n      let schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);\n      // If value is a scaler value\n      if (isNullish(schemaProp)) {\n        delete object[key];\n        dataPath.pop();\n        continue;\n      }\n      // If value is an object, recurse into it\n      if (isObject(value)) {\n        convert(value, schema, dataPath, format, oneOfPath);\n        dataPath.pop();\n        continue;\n      }\n      // If value is an array\n      if (convertArray({\n        value,\n        schemaProp,\n        schema,\n        object,\n        key,\n        dataPath,\n        format,\n        oneOfPath\n      })) {\n        continue;\n      }\n      // The following code is basically saying:\n      // if the schema specifies oneOf, then we are to loop\n      // over each possible schema and check if they type of the schema specifies format\n      // and if so we use the oneOfSchemaProp as the schema for formatting\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      if ((schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.format) === undefined && (schemaProp === null || schemaProp === void 0 ? void 0 : schemaProp.oneOf) !== undefined) {\n        for (const [_index, oneOfSchemaProp] of schemaProp.oneOf.entries()) {\n          if ((oneOfSchemaProp === null || oneOfSchemaProp === void 0 ? void 0 : oneOfSchemaProp.format) !== undefined) {\n            schemaProp = oneOfSchemaProp;\n            break;\n          }\n        }\n      }\n      object[key] = convertScalarValue(value, schemaProp.format, format);\n      dataPath.pop();\n    }\n  }\n  return object;\n};\n/**\n * Given data that can be interpreted according to the provided schema, returns equivalent data that has been formatted\n * according to the provided return format.\n *\n * @param schema - how to interpret the data\n * @param data - data to be formatted\n * @param returnFormat - how to format the data\n * @returns - formatted data\n *\n * @example\n *\n * ```js\n * import { FMT_NUMBER, utils } from \"web3\";\n *\n * console.log(\n *   utils.format({ format: \"uint\" }, \"221\", { number: FMT_NUMBER.HEX }),\n * );\n * // 0xdd\n * ```\n *\n */\nexport const format = function (schema, data) {\n  let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n  let dataToParse;\n  if (isObject(data)) {\n    dataToParse = mergeDeep({}, data);\n  } else if (Array.isArray(data)) {\n    dataToParse = [...data];\n  } else {\n    dataToParse = data;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const jsonSchema = isObject(schema) ? schema : utils.ethAbiToJsonSchema(schema);\n  if (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {\n    throw new FormatterError('Invalid json schema for formatting');\n  }\n  return convert(dataToParse, jsonSchema, [], returnFormat);\n};","map":{"version":3,"names":["FormatterError","FMT_BYTES","FMT_NUMBER","DEFAULT_RETURN_FORMAT","isNullish","isObject","utils","bytesToUint8Array","bytesToHex","numberToHex","toBigInt","mergeDeep","padLeft","isUint8Array","uint8ArrayConcat","parseBaseType","isDataFormat","dataFormat","findSchemaByDataPath","schema","dataPath","oneOfPath","arguments","length","undefined","result","Object","assign","previousDataPath","dataPart","oneOf","currentDataPath","path","find","_ref","key","properties","items","node","Array","isArray","parseInt","convertScalarValue","value","ethType","format","baseType","baseTypeSize","number","NUMBER","Number","HEX","STR","toString","BIGINT","String","paddedValue","Uint8Array","bytes","UINT8ARRAY","error","convertArray","_ref2","schemaProp","object","_schemaProp","forEach","oneOfSchemaProp","index","_a","type","_b","push","pop","i","arrObject","convert","data","entries","_index","returnFormat","dataToParse","jsonSchema","ethAbiToJsonSchema"],"sources":["C:\\Users\\deanw\\OneDrive\\Desktop\\GitHub\\tribepacks\\node_modules\\web3-utils\\src\\formatter.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { FormatterError } from 'web3-errors';\nimport {\n\tBytes,\n\tDataFormat,\n\tFMT_BYTES,\n\tFMT_NUMBER,\n\tFormatType,\n\tDEFAULT_RETURN_FORMAT,\n} from 'web3-types';\nimport { isNullish, isObject, JsonSchema, utils, ValidationSchemaInput } from 'web3-validator';\nimport { bytesToUint8Array, bytesToHex, numberToHex, toBigInt } from './converters.js';\nimport { mergeDeep } from './objects.js';\nimport { padLeft } from './string_manipulation.js';\nimport { isUint8Array, uint8ArrayConcat } from './uint8array.js';\n\nconst { parseBaseType } = utils;\n\nexport const isDataFormat = (dataFormat: unknown): dataFormat is DataFormat =>\n\ttypeof dataFormat === 'object' &&\n\t!isNullish(dataFormat) &&\n\t'number' in dataFormat &&\n\t'bytes' in dataFormat;\n\n/**\n * Finds the schema that corresponds to a specific data path within a larger JSON schema.\n * It works by iterating over the dataPath array and traversing the JSON schema one step at a time until it reaches the end of the path.\n *\n * @param schema - represents a JSON schema, which is an object that describes the structure of JSON data\n * @param dataPath - represents an array of strings that specifies the path to the data within the JSON schema\n * @param oneOfPath - represents an optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns the JSON schema that matches the data path\n *\n */\nconst findSchemaByDataPath = (\n\tschema: JsonSchema,\n\tdataPath: string[],\n\toneOfPath: [string, number][] = [],\n): JsonSchema | undefined => {\n\tlet result: JsonSchema = { ...schema } as JsonSchema;\n\tlet previousDataPath: string | undefined;\n\n\tfor (const dataPart of dataPath) {\n\t\tif (result.oneOf && previousDataPath) {\n\t\t\tconst currentDataPath = previousDataPath;\n\t\t\tconst path = oneOfPath.find(([key]) => key === currentDataPath);\n\t\t\tif (path && path[0] === previousDataPath) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n\t\t\t\tresult = result.oneOf[path[1]];\n\t\t\t}\n\t\t}\n\t\tif (!result.properties && !result.items) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (result.properties) {\n\t\t\tresult = (result.properties as Record<string, JsonSchema>)[dataPart];\n\t\t} else if (result.items && (result.items as JsonSchema).properties) {\n\t\t\tconst node = (result.items as JsonSchema).properties as Record<string, JsonSchema>;\n\n\t\t\tresult = node[dataPart];\n\t\t} else if (result.items && isObject(result.items)) {\n\t\t\tresult = result.items;\n\t\t} else if (result.items && Array.isArray(result.items)) {\n\t\t\tresult = result.items[parseInt(dataPart, 10)];\n\t\t}\n\n\t\tif (result && dataPart) previousDataPath = dataPart;\n\t}\n\n\treturn result;\n};\n/**\n * Converts a value depending on the format\n * @param value - value to convert\n * @param ethType - The type of the value to be parsed\n * @param format - The format to be converted to\n * @returns - The value converted to the specified format\n */\nexport const convertScalarValue = (value: unknown, ethType: string, format: DataFormat) => {\n\ttry {\n\t\tconst { baseType, baseTypeSize } = parseBaseType(ethType);\n\t\tif (baseType === 'int' || baseType === 'uint') {\n\t\t\tswitch (format.number) {\n\t\t\t\tcase FMT_NUMBER.NUMBER:\n\t\t\t\t\treturn Number(toBigInt(value));\n\t\t\t\tcase FMT_NUMBER.HEX:\n\t\t\t\t\treturn numberToHex(toBigInt(value));\n\t\t\t\tcase FMT_NUMBER.STR:\n\t\t\t\t\treturn toBigInt(value).toString();\n\t\t\t\tcase FMT_NUMBER.BIGINT:\n\t\t\t\t\treturn toBigInt(value);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatterError(`Invalid format: ${String(format.number)}`);\n\t\t\t}\n\t\t}\n\t\tif (baseType === 'bytes') {\n\t\t\tlet paddedValue;\n\t\t\tif (baseTypeSize) {\n\t\t\t\tif (typeof value === 'string') paddedValue = padLeft(value, baseTypeSize * 2);\n\t\t\t\telse if (isUint8Array(value)) {\n\t\t\t\t\tpaddedValue = uint8ArrayConcat(\n\t\t\t\t\t\tnew Uint8Array(baseTypeSize - value.length),\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tpaddedValue = value;\n\t\t\t}\n\t\t\tswitch (format.bytes) {\n\t\t\t\tcase FMT_BYTES.HEX:\n\t\t\t\t\treturn bytesToHex(bytesToUint8Array(paddedValue as Bytes));\n\t\t\t\tcase FMT_BYTES.UINT8ARRAY:\n\t\t\t\t\treturn bytesToUint8Array(paddedValue as Bytes);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new FormatterError(`Invalid format: ${String(format.bytes)}`);\n\t\t\t}\n\t\t}\n\n\t\tif (baseType === 'string') {\n\t\t\treturn String(value);\n\t\t}\n\t} catch (error) {\n\t\t// If someone didn't use `eth` keyword we can return original value\n\t\t// as the scope of this code is formatting not validation\n\t\treturn value;\n\t}\n\n\treturn value;\n};\n\nconst convertArray = ({\n\tvalue,\n\tschemaProp,\n\tschema,\n\tobject,\n\tkey,\n\tdataPath,\n\tformat,\n\toneOfPath = [],\n}: {\n\tvalue: unknown;\n\tschemaProp: JsonSchema;\n\tschema: JsonSchema;\n\tobject: Record<string, unknown>;\n\tkey: string;\n\tdataPath: string[];\n\tformat: DataFormat;\n\toneOfPath: [string, number][];\n}) => {\n\t// If value is an array\n\tif (Array.isArray(value)) {\n\t\tlet _schemaProp = schemaProp;\n\n\t\t// TODO This is a naive approach to solving the issue of\n\t\t// a schema using oneOf. This chunk of code was intended to handle\n\t\t// BlockSchema.transactions\n\t\t// TODO BlockSchema.transactions are not being formatted\n\t\tif (schemaProp?.oneOf !== undefined) {\n\t\t\t// The following code is basically saying:\n\t\t\t// if the schema specifies oneOf, then we are to loop\n\t\t\t// over each possible schema and check if they type of the schema\n\t\t\t// matches the type of value[0], and if so we use the oneOfSchemaProp\n\t\t\t// as the schema for formatting\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\tschemaProp.oneOf.forEach((oneOfSchemaProp: JsonSchema, index: number) => {\n\t\t\t\tif (\n\t\t\t\t\t!Array.isArray(schemaProp?.items) &&\n\t\t\t\t\t((typeof value[0] === 'object' &&\n\t\t\t\t\t\t(oneOfSchemaProp?.items as JsonSchema)?.type === 'object') ||\n\t\t\t\t\t\t(typeof value[0] === 'string' &&\n\t\t\t\t\t\t\t(oneOfSchemaProp?.items as JsonSchema)?.type !== 'object'))\n\t\t\t\t) {\n\t\t\t\t\t_schemaProp = oneOfSchemaProp;\n\t\t\t\t\toneOfPath.push([key, index]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (isNullish(_schemaProp?.items)) {\n\t\t\t// Can not find schema for array item, delete that item\n\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\tdelete object[key];\n\t\t\tdataPath.pop();\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// If schema for array items is a single type\n\t\tif (isObject(_schemaProp.items) && !isNullish(_schemaProp.items.format)) {\n\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t(object[key] as unknown[])[i] = convertScalarValue(\n\t\t\t\t\tvalue[i],\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\t_schemaProp?.items?.format,\n\t\t\t\t\tformat,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdataPath.pop();\n\t\t\treturn true;\n\t\t}\n\n\t\t// If schema for array items is an object\n\t\tif (!Array.isArray(_schemaProp?.items) && _schemaProp?.items?.type === 'object') {\n\t\t\tfor (const arrObject of value) {\n\t\t\t\t// eslint-disable-next-line no-use-before-define\n\t\t\t\tconvert(\n\t\t\t\t\tarrObject as Record<string, unknown> | unknown[],\n\t\t\t\t\tschema,\n\t\t\t\t\tdataPath,\n\t\t\t\t\tformat,\n\t\t\t\t\toneOfPath,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdataPath.pop();\n\t\t\treturn true;\n\t\t}\n\n\t\t// If schema for array is a tuple\n\t\tif (Array.isArray(_schemaProp?.items)) {\n\t\t\tfor (let i = 0; i < value.length; i += 1) {\n\t\t\t\t// eslint-disable-next-line no-param-reassign\n\t\t\t\t(object[key] as unknown[])[i] = convertScalarValue(\n\t\t\t\t\tvalue[i],\n\t\t\t\t\t_schemaProp.items[i].format as string,\n\t\t\t\t\tformat,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tdataPath.pop();\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\n/**\n * Converts the data to the specified format\n * @param data - data to convert\n * @param schema - The JSON schema that describes the structure of the data\n * @param dataPath - A string array that specifies the path to the data within the JSON schema\n * @param format  - The format to be converted to\n * @param oneOfPath - An optional array of two-element tuples that specifies the \"oneOf\" option to choose, if the schema has oneOf and the data path can match multiple subschemas\n * @returns - The data converted to the specified format\n */\nexport const convert = (\n\tdata: Record<string, unknown> | unknown[] | unknown,\n\tschema: JsonSchema,\n\tdataPath: string[],\n\tformat: DataFormat,\n\toneOfPath: [string, number][] = [],\n) => {\n\t// If it's a scalar value\n\tif (!isObject(data) && !Array.isArray(data)) {\n\t\treturn convertScalarValue(data, schema?.format as string, format);\n\t}\n\n\tconst object = data as Record<string, unknown>;\n\t// case when schema is array and `items` is object\n\tif (\n\t\tArray.isArray(object) &&\n\t\tschema?.type === 'array' &&\n\t\t(schema?.items as JsonSchema)?.type === 'object'\n\t) {\n\t\tconvertArray({\n\t\t\tvalue: object,\n\t\t\tschemaProp: schema,\n\t\t\tschema,\n\t\t\tobject,\n\t\t\tkey: '',\n\t\t\tdataPath,\n\t\t\tformat,\n\t\t\toneOfPath,\n\t\t});\n\t} else {\n\t\tfor (const [key, value] of Object.entries(object)) {\n\t\t\tdataPath.push(key);\n\t\t\tlet schemaProp = findSchemaByDataPath(schema, dataPath, oneOfPath);\n\n\t\t\t// If value is a scaler value\n\t\t\tif (isNullish(schemaProp)) {\n\t\t\t\tdelete object[key];\n\t\t\t\tdataPath.pop();\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If value is an object, recurse into it\n\t\t\tif (isObject(value)) {\n\t\t\t\tconvert(value, schema, dataPath, format, oneOfPath);\n\t\t\t\tdataPath.pop();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If value is an array\n\t\t\tif (\n\t\t\t\tconvertArray({\n\t\t\t\t\tvalue,\n\t\t\t\t\tschemaProp,\n\t\t\t\t\tschema,\n\t\t\t\t\tobject,\n\t\t\t\t\tkey,\n\t\t\t\t\tdataPath,\n\t\t\t\t\tformat,\n\t\t\t\t\toneOfPath,\n\t\t\t\t})\n\t\t\t) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// The following code is basically saying:\n\t\t\t// if the schema specifies oneOf, then we are to loop\n\t\t\t// over each possible schema and check if they type of the schema specifies format\n\t\t\t// and if so we use the oneOfSchemaProp as the schema for formatting\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\tif (schemaProp?.format === undefined && schemaProp?.oneOf !== undefined) {\n\t\t\t\tfor (const [_index, oneOfSchemaProp] of schemaProp.oneOf.entries()) {\n\t\t\t\t\tif (oneOfSchemaProp?.format !== undefined) {\n\t\t\t\t\t\tschemaProp = oneOfSchemaProp;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tobject[key] = convertScalarValue(value, schemaProp.format as string, format);\n\n\t\t\tdataPath.pop();\n\t\t}\n\t}\n\n\treturn object;\n};\n\n/**\n * Given data that can be interpreted according to the provided schema, returns equivalent data that has been formatted\n * according to the provided return format.\n *\n * @param schema - how to interpret the data\n * @param data - data to be formatted\n * @param returnFormat - how to format the data\n * @returns - formatted data\n *\n * @example\n *\n * ```js\n * import { FMT_NUMBER, utils } from \"web3\";\n *\n * console.log(\n *   utils.format({ format: \"uint\" }, \"221\", { number: FMT_NUMBER.HEX }),\n * );\n * // 0xdd\n * ```\n *\n */\nexport const format = <\n\tDataType extends Record<string, unknown> | unknown[] | unknown,\n\tReturnType extends DataFormat,\n>(\n\tschema: ValidationSchemaInput | JsonSchema,\n\tdata: DataType,\n\treturnFormat: ReturnType = DEFAULT_RETURN_FORMAT as ReturnType,\n): FormatType<DataType, ReturnType> => {\n\tlet dataToParse: Record<string, unknown> | unknown[] | unknown;\n\n\tif (isObject(data)) {\n\t\tdataToParse = mergeDeep({}, data);\n\t} else if (Array.isArray(data)) {\n\t\tdataToParse = [...data];\n\t} else {\n\t\tdataToParse = data;\n\t}\n\n\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\tconst jsonSchema: JsonSchema = isObject(schema) ? schema : utils.ethAbiToJsonSchema(schema);\n\n\tif (!jsonSchema.properties && !jsonSchema.items && !jsonSchema.format) {\n\t\tthrow new FormatterError('Invalid json schema for formatting');\n\t}\n\n\treturn convert(dataToParse, jsonSchema, [], returnFormat) as FormatType<\n\t\ttypeof data,\n\t\tReturnType\n\t>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}