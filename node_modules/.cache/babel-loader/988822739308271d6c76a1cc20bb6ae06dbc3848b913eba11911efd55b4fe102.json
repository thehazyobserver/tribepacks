{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport { ETH_DATA_FORMAT, DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport { accountSchema, blockSchema, feeHistorySchema, logSchema, transactionReceiptSchema, accessListResultSchema, SignatureObjectSchema } from './schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getProtocolVersion(web3Context.requestManager);\n});\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getSyncing(web3Context.requestManager);\n});\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getCoinbase(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = web3Context => __awaiter(void 0, void 0, void 0, function* () {\n  return ethRpcMethods.getMining(web3Context.requestManager);\n});\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getHashRate(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getHashRate(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getGasPrice(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getGasPrice(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getMaxPriorityFeePerGas(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockNumber(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getBlockNumber(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBalance(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getBalance(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getStorageAt(web3Context, address, storageSlot) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageSlotFormatted = format({\n      format: 'uint'\n    }, storageSlot, ETH_DATA_FORMAT);\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getStorageAt(web3Context.requestManager, address, storageSlotFormatted, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getCode(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getCode(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let hydrated = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByHash(web3Context.requestManager, blockHashFormatted, hydrated);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockByNumber(web3Context.requestManager, blockNumberFormatted, hydrated);\n    }\n    const res = format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    if (!isNullish(res)) {\n      const result = Object.assign(Object.assign({}, res), {\n        transactions: (_a = res.transactions) !== null && _a !== void 0 ? _a : []\n      });\n      return result;\n    }\n    return res;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockTransactionCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getBlockTransactionCountByNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getBlockUncleCount(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 2 ? arguments[2] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockHash(web3Context.requestManager, blockHashFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleCountByBlockNumber(web3Context.requestManager, blockNumberFormatted);\n    }\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getUncle(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let uncleIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const uncleIndexFormatted = format({\n      format: 'uint'\n    }, uncleIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, uncleIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getUncleByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, uncleIndexFormatted);\n    }\n    return format(blockSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransaction(web3Context, transactionHash) {\n  let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultReturnFormat;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    const response = yield ethRpcMethods.getTransactionByHash(web3Context.requestManager, transactionHashFormatted);\n    return isNullish(response) ? response : formatTransaction(response, returnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getPendingTransactions(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n    return response.map(transaction => formatTransaction(transaction, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    }));\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionFromBlock(web3Context) {\n  let block = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : web3Context.defaultBlock;\n  let transactionIndex = arguments.length > 2 ? arguments[2] : undefined;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionIndexFormatted = format({\n      format: 'uint'\n    }, transactionIndex, ETH_DATA_FORMAT);\n    let response;\n    if (isBytes(block)) {\n      const blockHashFormatted = format({\n        format: 'bytes32'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockHashAndIndex(web3Context.requestManager, blockHashFormatted, transactionIndexFormatted);\n    } else {\n      const blockNumberFormatted = isBlockTag(block) ? block : format({\n        format: 'uint'\n      }, block, ETH_DATA_FORMAT);\n      response = yield ethRpcMethods.getTransactionByBlockNumberAndIndex(web3Context.requestManager, blockNumberFormatted, transactionIndexFormatted);\n    }\n    return isNullish(response) ? response : formatTransaction(response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat, {\n      transactionSchema: web3Context.config.customTransactionSchema,\n      fillInputAndData: true\n    });\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionReceipt(web3Context, transactionHash, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionHashFormatted = format({\n      format: 'bytes32'\n    }, transactionHash, DEFAULT_RETURN_FORMAT);\n    let response;\n    try {\n      response = yield ethRpcMethods.getTransactionReceipt(web3Context.requestManager, transactionHashFormatted);\n    } catch (error) {\n      // geth indexing error, we poll until transactions stopped indexing\n      if (typeof error === 'object' && !isNullish(error) && 'message' in error && error.message === 'transaction indexing is in progress') {\n        console.warn('Transaction indexing is in progress.');\n      } else {\n        throw error;\n      }\n    }\n    return isNullish(response) ? response : format(transactionReceiptSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getTransactionCount(web3Context, address) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getTransactionCount(web3Context.requestManager, address, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction(web3Context, transactionObj, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  let transactionMiddleware = arguments.length > 4 ? arguments[4] : undefined;\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        let transaction = Object.assign({}, transactionObj);\n        if (!isNullish(transactionMiddleware)) {\n          transaction = yield transactionMiddleware.processTransaction(transaction);\n        }\n        let transactionFormatted = formatTransaction(Object.assign(Object.assign({}, transaction), {\n          from: getTransactionFromOrToAttr('from', web3Context, transaction),\n          to: getTransactionFromOrToAttr('to', web3Context, transaction)\n        }), ETH_DATA_FORMAT, {\n          transactionSchema: web3Context.config.customTransactionSchema\n        });\n        try {\n          transactionFormatted = yield sendTxHelper.populateGasPrice({\n            transaction,\n            transactionFormatted\n          });\n          yield sendTxHelper.checkRevertBeforeSending(transactionFormatted);\n          sendTxHelper.emitSending(transactionFormatted);\n          let wallet;\n          if (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n            wallet = web3Context.wallet.get(transactionFormatted.from);\n          }\n          const transactionHash = yield sendTxHelper.signAndSend({\n            wallet,\n            tx: transactionFormatted\n          });\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitSent(transactionFormatted);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: transactionFormatted\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: transactionFormatted\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction(web3Context, signedTransaction, returnFormat) {\n  let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {\n    checkRevertBeforeSending: true\n  };\n  // TODO - Promise returned in function argument where a void return was expected\n  // eslint-disable-next-line @typescript-eslint/no-misused-promises\n  const promiEvent = new Web3PromiEvent((resolve, reject) => {\n    setImmediate(() => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        const sendTxHelper = new SendTxHelper({\n          web3Context,\n          promiEvent,\n          options,\n          returnFormat\n        });\n        // Formatting signedTransaction to be send to RPC endpoint\n        const signedTransactionFormattedHex = format({\n          format: 'bytes'\n        }, signedTransaction, ETH_DATA_FORMAT);\n        const unSerializedTransaction = TransactionFactory.fromSerializedData(bytesToUint8Array(hexToBytes(signedTransactionFormattedHex)));\n        const unSerializedTransactionWithFrom = Object.assign(Object.assign({}, unSerializedTransaction.toJSON()), {\n          // Some providers will default `from` to address(0) causing the error\n          // reported from `eth_call` to not be the reason the user's tx failed\n          // e.g. `eth_call` will return an Out of Gas error for a failed\n          // smart contract execution contract, because the sender, address(0),\n          // has no balance to pay for the gas of the transaction execution\n          from: unSerializedTransaction.getSenderAddress().toString()\n        });\n        try {\n          const {\n              v,\n              r,\n              s\n            } = unSerializedTransactionWithFrom,\n            txWithoutSigParams = __rest(unSerializedTransactionWithFrom, [\"v\", \"r\", \"s\"]);\n          yield sendTxHelper.checkRevertBeforeSending(txWithoutSigParams);\n          sendTxHelper.emitSending(signedTransactionFormattedHex);\n          const transactionHash = yield trySendTransaction(web3Context, () => __awaiter(this, void 0, void 0, function* () {\n            return ethRpcMethods.sendRawTransaction(web3Context.requestManager, signedTransactionFormattedHex);\n          }));\n          sendTxHelper.emitSent(signedTransactionFormattedHex);\n          const transactionHashFormatted = format({\n            format: 'bytes32'\n          }, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          sendTxHelper.emitTransactionHash(transactionHashFormatted);\n          const transactionReceipt = yield waitForTransactionReceipt(web3Context, transactionHash, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n          const transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(format(transactionReceiptSchema, transactionReceipt, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat));\n          sendTxHelper.emitReceipt(transactionReceiptFormatted);\n          resolve(yield sendTxHelper.handleResolve({\n            receipt: transactionReceiptFormatted,\n            tx: unSerializedTransactionWithFrom\n          }));\n          sendTxHelper.emitConfirmation({\n            receipt: transactionReceiptFormatted,\n            transactionHash\n          });\n        } catch (error) {\n          reject(yield sendTxHelper.handleError({\n            error,\n            tx: unSerializedTransactionWithFrom\n          }));\n        }\n      }))();\n    });\n  });\n  return promiEvent;\n}\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sign(web3Context, message, addressOrIndex) {\n  let returnFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultReturnFormat;\n  var _a;\n  return __awaiter(this, void 0, void 0, function* () {\n    const messageFormatted = format({\n      format: 'bytes'\n    }, message, DEFAULT_RETURN_FORMAT);\n    if ((_a = web3Context.wallet) === null || _a === void 0 ? void 0 : _a.get(addressOrIndex)) {\n      const wallet = web3Context.wallet.get(addressOrIndex);\n      const signed = wallet.sign(messageFormatted);\n      return format(SignatureObjectSchema, signed, returnFormat);\n    }\n    if (typeof addressOrIndex === 'number') {\n      throw new SignatureError(message, 'RPC method \"eth_sign\" does not support index signatures');\n    }\n    const response = yield ethRpcMethods.sign(web3Context.requestManager, addressOrIndex, messageFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTransaction(web3Context, transaction) {\n  let returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultReturnFormat;\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTransaction(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }));\n    // Some clients only return the encoded signed transaction (e.g. Ganache)\n    // while clients such as Geth return the desired SignedTransactionInfoAPI object\n    return isString(response) ? decodeSignedTransaction(response, returnFormat, {\n      fillInputAndData: true\n    }) : {\n      raw: format({\n        format: 'bytes'\n      }, response.raw, returnFormat),\n      tx: formatTransaction(response.tx, returnFormat, {\n        transactionSchema: web3Context.config.customTransactionSchema,\n        fillInputAndData: true\n      })\n    };\n  });\n}\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function call(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultReturnFormat;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.call(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }), blockNumberFormatted);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat);\n  });\n}\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function estimateGas(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    });\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.estimateGas(web3Context.requestManager, transactionFormatted, blockNumberFormatted);\n    return format({\n      format: 'uint'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getLogs(web3Context, filter, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // format type bigint or number toBlock and fromBlock to hexstring.\n    let {\n      toBlock,\n      fromBlock\n    } = filter;\n    if (!isNullish(toBlock)) {\n      if (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n        toBlock = numberToHex(toBlock);\n      }\n    }\n    if (!isNullish(fromBlock)) {\n      if (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n        fromBlock = numberToHex(fromBlock);\n      }\n    }\n    const formattedFilter = Object.assign(Object.assign({}, filter), {\n      fromBlock,\n      toBlock\n    });\n    const response = yield ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n    const result = response.map(res => {\n      if (typeof res === 'string') {\n        return res;\n      }\n      return format(logSchema, res, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n    });\n    return result;\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getChainId(web3Context, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.getChainId(web3Context.requestManager);\n    return format({\n      format: 'uint'\n    },\n    // Response is number in hex formatted string\n    response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getProof(web3Context, address, storageKeys) {\n  let blockNumber = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const storageKeysFormatted = storageKeys.map(storageKey => format({\n      format: 'bytes'\n    }, storageKey, ETH_DATA_FORMAT));\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.getProof(web3Context.requestManager, address, storageKeysFormatted, blockNumberFormatted);\n    return format(accountSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function getFeeHistory(web3Context, blockCount) {\n  let newestBlock = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let rewardPercentiles = arguments.length > 3 ? arguments[3] : undefined;\n  let returnFormat = arguments.length > 4 ? arguments[4] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockCountFormatted = format({\n      format: 'uint'\n    }, blockCount, ETH_DATA_FORMAT);\n    const newestBlockFormatted = isBlockTag(newestBlock) ? newestBlock : format({\n      format: 'uint'\n    }, newestBlock, ETH_DATA_FORMAT);\n    const rewardPercentilesFormatted = format({\n      type: 'array',\n      items: {\n        format: 'uint'\n      }\n    }, rewardPercentiles, NUMBER_DATA_FORMAT);\n    const response = yield ethRpcMethods.getFeeHistory(web3Context.requestManager, blockCountFormatted, newestBlockFormatted, rewardPercentilesFormatted);\n    return format(feeHistorySchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function createAccessList(web3Context, transaction) {\n  let blockNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : web3Context.defaultBlock;\n  let returnFormat = arguments.length > 3 ? arguments[3] : undefined;\n  return __awaiter(this, void 0, void 0, function* () {\n    const blockNumberFormatted = isBlockTag(blockNumber) ? blockNumber : format({\n      format: 'uint'\n    }, blockNumber, ETH_DATA_FORMAT);\n    const response = yield ethRpcMethods.createAccessList(web3Context.requestManager, formatTransaction(transaction, ETH_DATA_FORMAT, {\n      transactionSchema: web3Context.config.customTransactionSchema\n    }), blockNumberFormatted);\n    return format(accessListResultSchema, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function signTypedData(web3Context, address, typedData, useLegacy, returnFormat) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const response = yield ethRpcMethods.signTypedData(web3Context.requestManager, address, typedData, useLegacy);\n    return format({\n      format: 'bytes'\n    }, response, returnFormat !== null && returnFormat !== void 0 ? returnFormat : web3Context.defaultReturnFormat);\n  });\n}","map":{"version":3,"names":["ETH_DATA_FORMAT","DEFAULT_RETURN_FORMAT","Web3PromiEvent","format","hexToBytes","bytesToUint8Array","numberToHex","TransactionFactory","isBlockTag","isBytes","isNullish","isString","SignatureError","ethRpcMethods","decodeSignedTransaction","accountSchema","blockSchema","feeHistorySchema","logSchema","transactionReceiptSchema","accessListResultSchema","SignatureObjectSchema","getTransactionFromOrToAttr","formatTransaction","trySendTransaction","waitForTransactionReceipt","NUMBER_DATA_FORMAT","SendTxHelper","getProtocolVersion","web3Context","__awaiter","requestManager","isSyncing","getSyncing","getCoinbase","isMining","getMining","getHashRate","returnFormat","response","defaultReturnFormat","getGasPrice","getMaxPriorityFeePerGas","getBlockNumber","getBalance","address","blockNumber","arguments","length","undefined","defaultBlock","blockNumberFormatted","getStorageAt","storageSlot","storageSlotFormatted","getCode","getBlock","block","hydrated","blockHashFormatted","getBlockByHash","getBlockByNumber","res","result","Object","assign","transactions","_a","getBlockTransactionCount","getBlockTransactionCountByHash","getBlockTransactionCountByNumber","getBlockUncleCount","getUncleCountByBlockHash","getUncleCountByBlockNumber","getUncle","uncleIndex","uncleIndexFormatted","getUncleByBlockHashAndIndex","getUncleByBlockNumberAndIndex","getTransaction","transactionHash","transactionHashFormatted","getTransactionByHash","transactionSchema","config","customTransactionSchema","fillInputAndData","getPendingTransactions","map","transaction","getTransactionFromBlock","transactionIndex","transactionIndexFormatted","getTransactionByBlockHashAndIndex","getTransactionByBlockNumberAndIndex","getTransactionReceipt","error","message","console","warn","getTransactionCount","sendTransaction","transactionObj","options","checkRevertBeforeSending","transactionMiddleware","promiEvent","resolve","reject","setImmediate","sendTxHelper","processTransaction","transactionFormatted","from","to","populateGasPrice","emitSending","wallet","get","signAndSend","tx","emitSent","emitTransactionHash","transactionReceipt","transactionReceiptFormatted","getReceiptWithEvents","emitReceipt","handleResolve","receipt","emitConfirmation","handleError","sendSignedTransaction","signedTransaction","signedTransactionFormattedHex","unSerializedTransaction","fromSerializedData","unSerializedTransactionWithFrom","toJSON","getSenderAddress","toString","v","r","s","txWithoutSigParams","__rest","sendRawTransaction","sign","addressOrIndex","messageFormatted","signed","signTransaction","raw","call","estimateGas","getLogs","filter","toBlock","fromBlock","formattedFilter","getChainId","getProof","storageKeys","storageKeysFormatted","storageKey","getFeeHistory","blockCount","newestBlock","rewardPercentiles","blockCountFormatted","newestBlockFormatted","rewardPercentilesFormatted","type","items","createAccessList","signTypedData","typedData","useLegacy"],"sources":["C:\\Users\\deanw\\OneDrive\\Desktop\\GitHub\\tribepacks\\node_modules\\web3-eth\\src\\rpc_method_wrappers.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n// Disabling because returnTypes must be last param to match 1.x params\n/* eslint-disable default-param-last */\nimport {\n\tETH_DATA_FORMAT,\n\tFormatType,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tSignedTransactionInfoAPI,\n\tWeb3BaseWalletAccount,\n\tAddress,\n\tBlockTag,\n\tBlockNumberOrTag,\n\tBytes,\n\tFilter,\n\tHexString,\n\tNumbers,\n\tHexStringBytes,\n\tAccountObject,\n\tBlock,\n\tFeeHistory,\n\tLog,\n\tTransactionReceipt,\n\tTransaction,\n\tTransactionCall,\n\tWeb3EthExecutionAPI,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tTransactionForAccessList,\n\tAccessListResult,\n\tEip712TypedData,\n} from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, hexToBytes, bytesToUint8Array, numberToHex } from 'web3-utils';\nimport { TransactionFactory } from 'web3-eth-accounts';\nimport { isBlockTag, isBytes, isNullish, isString } from 'web3-validator';\nimport { SignatureError } from 'web3-errors';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { decodeSignedTransaction } from './utils/decode_signed_transaction.js';\nimport {\n\taccountSchema,\n\tblockSchema,\n\tfeeHistorySchema,\n\tlogSchema,\n\ttransactionReceiptSchema,\n\taccessListResultSchema,\n\tSignatureObjectSchema,\n} from './schemas.js';\nimport {\n\tSendSignedTransactionEvents,\n\tSendSignedTransactionOptions,\n\tSendTransactionEvents,\n\tSendTransactionOptions,\n\tTransactionMiddleware,\n} from './types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionFromOrToAttr } from './utils/transaction_builder.js';\nimport { formatTransaction } from './utils/format_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { trySendTransaction } from './utils/try_send_transaction.js';\n// eslint-disable-next-line import/no-cycle\nimport { waitForTransactionReceipt } from './utils/wait_for_transaction_receipt.js';\nimport { NUMBER_DATA_FORMAT } from './constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { SendTxHelper } from './utils/send_tx_helper.js';\n\n/**\n * View additional documentations here: {@link Web3Eth.getProtocolVersion}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getProtocolVersion = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getProtocolVersion(web3Context.requestManager);\n\n// TODO Add returnFormat parameter\n/**\n * View additional documentations here: {@link Web3Eth.isSyncing}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isSyncing = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getSyncing(web3Context.requestManager);\n\n// TODO consider adding returnFormat parameter (to format address as bytes)\n/**\n * View additional documentations here: {@link Web3Eth.getCoinbase}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const getCoinbase = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getCoinbase(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.isMining}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport const isMining = async (web3Context: Web3Context<EthExecutionAPI>) =>\n\tethRpcMethods.getMining(web3Context.requestManager);\n\n/**\n * View additional documentations here: {@link Web3Eth.getHashRate}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getHashRate<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getHashRate(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getGasPrice}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getGasPrice<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getGasPrice(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getMaxPriorityFeePerGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getMaxPriorityFeePerGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getMaxPriorityFeePerGas(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n/**\n * View additional documentations here: {@link Web3Eth.getBlockNumber}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockNumber<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getBlockNumber(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBalance}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBalance<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getBalance(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getStorageAt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getStorageAt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tstorageSlot: Numbers,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageSlotFormatted = format({ format: 'uint' }, storageSlot, ETH_DATA_FORMAT);\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getStorageAt(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageSlotFormatted,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getCode}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getCode<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getCode(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\treturn format(\n\t\t{ format: 'bytes' },\n\t\tresponse as Bytes,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\thydrated = false,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\thydrated,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\thydrated,\n\t\t);\n\t}\n\tconst res = format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n\n\tif (!isNullish(res)) {\n\t\tconst result = {\n\t\t\t...res,\n\t\t\ttransactions: res.transactions ?? [],\n\t\t};\n\t\treturn result;\n\t}\n\n\treturn res;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getBlockTransactionCountByNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getBlockUncleCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getBlockUncleCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockHash(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleCountByBlockNumber(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getUncle}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getUncle<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\tuncleIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst uncleIndexFormatted = format({ format: 'uint' }, uncleIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getUncleByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\tuncleIndexFormatted,\n\t\t);\n\t}\n\n\treturn format(\n\t\tblockSchema,\n\t\tresponse as unknown as Block,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tconst response = await ethRpcMethods.getTransactionByHash(\n\t\tweb3Context.requestManager,\n\t\ttransactionHashFormatted,\n\t);\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat, {\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getPendingTransactions}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getPendingTransactions<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getPendingTransactions(web3Context.requestManager);\n\n\treturn response.map(transaction =>\n\t\tformatTransaction(\n\t\t\ttransaction as unknown as Transaction,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t{\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t\t},\n\t\t),\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionFromBlock}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionFromBlock<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblock: Bytes | BlockNumberOrTag = web3Context.defaultBlock,\n\ttransactionIndex: Numbers,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionIndexFormatted = format({ format: 'uint' }, transactionIndex, ETH_DATA_FORMAT);\n\n\tlet response;\n\tif (isBytes(block)) {\n\t\tconst blockHashFormatted = format({ format: 'bytes32' }, block, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockHashAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockHashFormatted as HexString,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t} else {\n\t\tconst blockNumberFormatted = isBlockTag(block as string)\n\t\t\t? (block as BlockTag)\n\t\t\t: format({ format: 'uint' }, block as Numbers, ETH_DATA_FORMAT);\n\t\tresponse = await ethRpcMethods.getTransactionByBlockNumberAndIndex(\n\t\t\tweb3Context.requestManager,\n\t\t\tblockNumberFormatted,\n\t\t\ttransactionIndexFormatted,\n\t\t);\n\t}\n\n\treturn isNullish(response)\n\t\t? response\n\t\t: formatTransaction(response, returnFormat ?? web3Context.defaultReturnFormat, {\n\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\tfillInputAndData: true,\n\t\t  });\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionReceipt}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionReceipt<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionHash: Bytes,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionHashFormatted = format(\n\t\t{ format: 'bytes32' },\n\t\ttransactionHash,\n\t\tDEFAULT_RETURN_FORMAT,\n\t);\n\tlet response;\n\ttry {\n\t\tresponse = await ethRpcMethods.getTransactionReceipt(\n\t\t\tweb3Context.requestManager,\n\t\t\ttransactionHashFormatted,\n\t\t);\n\t} catch (error) {\n\t\t// geth indexing error, we poll until transactions stopped indexing\n\t\tif (\n\t\t\ttypeof error === 'object' &&\n\t\t\t!isNullish(error) &&\n\t\t\t'message' in error &&\n\t\t\t(error as { message: string }).message === 'transaction indexing is in progress'\n\t\t) {\n\t\t\tconsole.warn('Transaction indexing is in progress.');\n\t\t} else {\n\t\t\tthrow error;\n\t\t}\n\t}\n\treturn isNullish(response)\n\t\t? response\n\t\t: format(\n\t\t\t\ttransactionReceiptSchema,\n\t\t\t\tresponse as unknown as TransactionReceipt,\n\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t  );\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getTransactionCount}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getTransactionCount<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\tconst response = await ethRpcMethods.getTransactionCount(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransactionObj:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\treturnFormat: ReturnFormat,\n\toptions: SendTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n\ttransactionMiddleware?: TransactionMiddleware,\n): Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>> {\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\n\t\t\t\t\tlet transaction = { ...transactionObj };\n\n\t\t\t\t\tif (!isNullish(transactionMiddleware)) {\n\t\t\t\t\t\ttransaction = await transactionMiddleware.processTransaction(transaction);\n\t\t\t\t\t}\n\n\t\t\t\t\tlet transactionFormatted:\n\t\t\t\t\t\t| Transaction\n\t\t\t\t\t\t| TransactionWithFromLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithToLocalWalletIndex\n\t\t\t\t\t\t| TransactionWithFromAndToLocalWalletIndex = formatTransaction(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t...transaction,\n\t\t\t\t\t\t\tfrom: getTransactionFromOrToAttr('from', web3Context, transaction),\n\t\t\t\t\t\t\tto: getTransactionFromOrToAttr('to', web3Context, transaction),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttransactionFormatted = await sendTxHelper.populateGasPrice({\n\t\t\t\t\t\t\ttransaction,\n\t\t\t\t\t\t\ttransactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttransactionFormatted as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(transactionFormatted);\n\n\t\t\t\t\t\tlet wallet: Web3BaseWalletAccount | undefined;\n\n\t\t\t\t\t\tif (web3Context.wallet && !isNullish(transactionFormatted.from)) {\n\t\t\t\t\t\t\twallet = web3Context.wallet.get(\n\t\t\t\t\t\t\t\t(transactionFormatted as Transaction).from as string,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst transactionHash: HexString = await sendTxHelper.signAndSend({\n\t\t\t\t\t\t\twallet,\n\t\t\t\t\t\t\ttx: transactionFormatted,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tsendTxHelper.emitSent(transactionFormatted);\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: transactionFormatted as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sendSignedTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport function sendSignedTransaction<\n\tReturnFormat extends DataFormat,\n\tResolveType = FormatType<TransactionReceipt, ReturnFormat>,\n>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsignedTransaction: Bytes,\n\treturnFormat: ReturnFormat,\n\toptions: SendSignedTransactionOptions<ResolveType> = { checkRevertBeforeSending: true },\n): Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>> {\n\t// TODO - Promise returned in function argument where a void return was expected\n\t// eslint-disable-next-line @typescript-eslint/no-misused-promises\n\tconst promiEvent = new Web3PromiEvent<ResolveType, SendSignedTransactionEvents<ReturnFormat>>(\n\t\t(resolve, reject) => {\n\t\t\tsetImmediate(() => {\n\t\t\t\t(async () => {\n\t\t\t\t\tconst sendTxHelper = new SendTxHelper<ReturnFormat, ResolveType>({\n\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\tpromiEvent,\n\t\t\t\t\t\toptions,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t});\n\t\t\t\t\t// Formatting signedTransaction to be send to RPC endpoint\n\t\t\t\t\tconst signedTransactionFormattedHex = format(\n\t\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t\tsignedTransaction,\n\t\t\t\t\t\tETH_DATA_FORMAT,\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransaction = TransactionFactory.fromSerializedData(\n\t\t\t\t\t\tbytesToUint8Array(hexToBytes(signedTransactionFormattedHex)),\n\t\t\t\t\t);\n\t\t\t\t\tconst unSerializedTransactionWithFrom = {\n\t\t\t\t\t\t...unSerializedTransaction.toJSON(),\n\t\t\t\t\t\t// Some providers will default `from` to address(0) causing the error\n\t\t\t\t\t\t// reported from `eth_call` to not be the reason the user's tx failed\n\t\t\t\t\t\t// e.g. `eth_call` will return an Out of Gas error for a failed\n\t\t\t\t\t\t// smart contract execution contract, because the sender, address(0),\n\t\t\t\t\t\t// has no balance to pay for the gas of the transaction execution\n\t\t\t\t\t\tfrom: unSerializedTransaction.getSenderAddress().toString(),\n\t\t\t\t\t};\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst { v, r, s, ...txWithoutSigParams } = unSerializedTransactionWithFrom;\n\n\t\t\t\t\t\tawait sendTxHelper.checkRevertBeforeSending(\n\t\t\t\t\t\t\ttxWithoutSigParams as TransactionCall,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSending(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHash = await trySendTransaction(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\tasync (): Promise<string> =>\n\t\t\t\t\t\t\t\tethRpcMethods.sendRawTransaction(\n\t\t\t\t\t\t\t\t\tweb3Context.requestManager,\n\t\t\t\t\t\t\t\t\tsignedTransactionFormattedHex,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitSent(signedTransactionFormattedHex);\n\n\t\t\t\t\t\tconst transactionHashFormatted = format(\n\t\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\t\ttransactionHash as Bytes,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitTransactionHash(\n\t\t\t\t\t\t\ttransactionHashFormatted as string & Uint8Array,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceipt = await waitForTransactionReceipt(\n\t\t\t\t\t\t\tweb3Context,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst transactionReceiptFormatted = sendTxHelper.getReceiptWithEvents(\n\t\t\t\t\t\t\tformat(\n\t\t\t\t\t\t\t\ttransactionReceiptSchema,\n\t\t\t\t\t\t\t\ttransactionReceipt,\n\t\t\t\t\t\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitReceipt(transactionReceiptFormatted);\n\n\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\tawait sendTxHelper.handleResolve({\n\t\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsendTxHelper.emitConfirmation({\n\t\t\t\t\t\t\treceipt: transactionReceiptFormatted,\n\t\t\t\t\t\t\ttransactionHash,\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\treject(\n\t\t\t\t\t\t\tawait sendTxHelper.handleError({\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t\ttx: unSerializedTransactionWithFrom as TransactionCall,\n\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t})() as unknown;\n\t\t\t});\n\t\t},\n\t);\n\n\treturn promiEvent;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.sign}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function sign<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tmessage: Bytes,\n\taddressOrIndex: Address | number,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst messageFormatted = format({ format: 'bytes' }, message, DEFAULT_RETURN_FORMAT);\n\tif (web3Context.wallet?.get(addressOrIndex)) {\n\t\tconst wallet = web3Context.wallet.get(addressOrIndex) as Web3BaseWalletAccount;\n\t\tconst signed = wallet.sign(messageFormatted);\n\t\treturn format(SignatureObjectSchema, signed, returnFormat);\n\t}\n\n\tif (typeof addressOrIndex === 'number') {\n\t\tthrow new SignatureError(\n\t\t\tmessage,\n\t\t\t'RPC method \"eth_sign\" does not support index signatures',\n\t\t);\n\t}\n\n\tconst response = await ethRpcMethods.sign(\n\t\tweb3Context.requestManager,\n\t\taddressOrIndex,\n\t\tmessageFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTransaction}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTransaction<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTransaction(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t);\n\t// Some clients only return the encoded signed transaction (e.g. Ganache)\n\t// while clients such as Geth return the desired SignedTransactionInfoAPI object\n\treturn isString(response as HexStringBytes)\n\t\t? decodeSignedTransaction(response as HexStringBytes, returnFormat, {\n\t\t\t\tfillInputAndData: true,\n\t\t  })\n\t\t: {\n\t\t\t\traw: format(\n\t\t\t\t\t{ format: 'bytes' },\n\t\t\t\t\t(response as SignedTransactionInfoAPI).raw,\n\t\t\t\t\treturnFormat,\n\t\t\t\t),\n\t\t\t\ttx: formatTransaction((response as SignedTransactionInfoAPI).tx, returnFormat, {\n\t\t\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t\t\t\tfillInputAndData: true,\n\t\t\t\t}),\n\t\t  };\n}\n\n// TODO Decide what to do with transaction.to\n// https://github.com/ChainSafe/web3.js/pull/4525#issuecomment-982330076\n/**\n * View additional documentations here: {@link Web3Eth.call}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function call<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionCall,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat = web3Context.defaultReturnFormat as ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.call(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format({ format: 'bytes' }, response as Bytes, returnFormat);\n}\n\n// TODO - Investigate whether response is padded as 1.x docs suggest\n/**\n * View additional documentations here: {@link Web3Eth.estimateGas}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function estimateGas<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: Transaction,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst transactionFormatted = formatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t});\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.estimateGas(\n\t\tweb3Context.requestManager,\n\t\ttransactionFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\tresponse as Numbers,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO - Add input formatting to filter\n/**\n * View additional documentations here: {@link Web3Eth.getPastLogs}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getLogs<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\tfilter: Filter,\n\treturnFormat: ReturnFormat,\n) {\n\t// format type bigint or number toBlock and fromBlock to hexstring.\n\tlet { toBlock, fromBlock } = filter;\n\tif (!isNullish(toBlock)) {\n\t\tif (typeof toBlock === 'number' || typeof toBlock === 'bigint') {\n\t\t\ttoBlock = numberToHex(toBlock);\n\t\t}\n\t}\n\tif (!isNullish(fromBlock)) {\n\t\tif (typeof fromBlock === 'number' || typeof fromBlock === 'bigint') {\n\t\t\tfromBlock = numberToHex(fromBlock);\n\t\t}\n\t}\n\n\tconst formattedFilter = { ...filter, fromBlock, toBlock };\n\n\tconst response = await ethRpcMethods.getLogs(web3Context.requestManager, formattedFilter);\n\n\tconst result = response.map(res => {\n\t\tif (typeof res === 'string') {\n\t\t\treturn res;\n\t\t}\n\n\t\treturn format(\n\t\t\tlogSchema,\n\t\t\tres as unknown as Log,\n\t\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t\t);\n\t});\n\n\treturn result;\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getChainId}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getChainId<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.getChainId(web3Context.requestManager);\n\n\treturn format(\n\t\t{ format: 'uint' },\n\t\t// Response is number in hex formatted string\n\t\tresponse as unknown as number,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.getProof}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getProof<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: Bytes[],\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst storageKeysFormatted = storageKeys.map(storageKey =>\n\t\tformat({ format: 'bytes' }, storageKey, ETH_DATA_FORMAT),\n\t);\n\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = await ethRpcMethods.getProof(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\tstorageKeysFormatted,\n\t\tblockNumberFormatted,\n\t);\n\n\treturn format(\n\t\taccountSchema,\n\t\tresponse as unknown as AccountObject,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n// TODO Throwing an error with Geth, but not Infura\n// TODO gasUsedRatio and reward not formatting\n/**\n * View additional documentations here: {@link Web3Eth.getFeeHistory}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function getFeeHistory<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tblockCount: Numbers,\n\tnewestBlock: BlockNumberOrTag = web3Context.defaultBlock,\n\trewardPercentiles: Numbers[],\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockCountFormatted = format({ format: 'uint' }, blockCount, ETH_DATA_FORMAT);\n\n\tconst newestBlockFormatted = isBlockTag(newestBlock as string)\n\t\t? (newestBlock as BlockTag)\n\t\t: format({ format: 'uint' }, newestBlock as Numbers, ETH_DATA_FORMAT);\n\n\tconst rewardPercentilesFormatted = format(\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\tformat: 'uint',\n\t\t\t},\n\t\t},\n\t\trewardPercentiles,\n\t\tNUMBER_DATA_FORMAT,\n\t);\n\n\tconst response = await ethRpcMethods.getFeeHistory(\n\t\tweb3Context.requestManager,\n\t\tblockCountFormatted,\n\t\tnewestBlockFormatted,\n\t\trewardPercentilesFormatted,\n\t);\n\n\treturn format(\n\t\tfeeHistorySchema,\n\t\tresponse as unknown as FeeHistory,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.createAccessList}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function createAccessList<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction: TransactionForAccessList,\n\tblockNumber: BlockNumberOrTag = web3Context.defaultBlock,\n\treturnFormat: ReturnFormat,\n) {\n\tconst blockNumberFormatted = isBlockTag(blockNumber as string)\n\t\t? (blockNumber as BlockTag)\n\t\t: format({ format: 'uint' }, blockNumber as Numbers, ETH_DATA_FORMAT);\n\n\tconst response = (await ethRpcMethods.createAccessList(\n\t\tweb3Context.requestManager,\n\t\tformatTransaction(transaction, ETH_DATA_FORMAT, {\n\t\t\ttransactionSchema: web3Context.config.customTransactionSchema,\n\t\t}),\n\t\tblockNumberFormatted,\n\t)) as unknown as AccessListResult;\n\n\treturn format(\n\t\taccessListResultSchema,\n\t\tresponse,\n\t\treturnFormat ?? web3Context.defaultReturnFormat,\n\t);\n}\n\n/**\n * View additional documentations here: {@link Web3Eth.signTypedData}\n * @param web3Context ({@link Web3Context}) Web3 configuration object that contains things such as the provider, request manager, wallet, etc.\n */\nexport async function signTypedData<ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy: boolean,\n\treturnFormat: ReturnFormat,\n) {\n\tconst response = await ethRpcMethods.signTypedData(\n\t\tweb3Context.requestManager,\n\t\taddress,\n\t\ttypedData,\n\t\tuseLegacy,\n\t);\n\n\treturn format({ format: 'bytes' }, response, returnFormat ?? web3Context.defaultReturnFormat);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}